name: "Link to Projects with field"
description: "This Action allows you to tie issues and pull requests to Projects by specifying any value for any field"
inputs:
  GH_TOKEN:
    description: "GitHub Token(Required: repo, admin:org, projects)"
    required: true
  IsOrganization:
    description: "Is the repository in an organization"
    default: "false"
  ProjectsNumber:
    description: "The number of the project you want to link to"
    required: true
  FieldType:
    description: "Currently only Single Select is supported"
    default: "single_select"
  FiledKeyValues:
    description: "The key value pairs of the field and the value you want to link to"
    required: true
    default: '[{"key": "Status", "value": "Todo"}]'
runs:
  using: "composite"
  steps:
    - name: link-projects
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        if [[ "${{ github.event_name }}" == "issues" ]]; then
          URL=${{ github.event.issue.html_url }}
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          URL=${{ github.event.pull_request.html_url }}
        fi

        gh project item-add ${{ inputs.ProjectsNumber }} --owner ${{ github.repository_owner }} --url $URL

    - name: get-global-id
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        if [[ "${{ inputs.IsOrganization }}" == "true" ]]; then
          gh api graphql -f query='
            query {
              organization(login: "${{ github.repository_owner }}") {
                projectV2(number: ${{ inputs.ProjectsNumber }}) {
                  id
                  fields(first: 100) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' > project_data.json
        else
          gh api graphql -f query='
            query {
              user(login: "${{ github.repository_owner }}") {
                projectV2(number: ${{ inputs.ProjectsNumber }}) {
                  id
                  fields(first: 100) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' > project_data.json
        fi

    - name: Set Project Data
      shell: bash
      run: |
        if [[ "${{ inputs.IsOrganization }}" == "true" ]]; then
          echo "PROJECT_ID=$(jq -r '.data.organization.projectV2.id' project_data.json)" >> $GITHUB_ENV
        else
          echo "PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)" >> $GITHUB_ENV
        fi

        field_key_values=$(echo '${{ inputs.FiledKeyValues }}' | jq -c '.[]')

        enc_data="["

        for key_value in $field_key_values; do
          field_name=$(echo $key_value | jq -r '.key')
          value_name=$(echo $key_value | jq -r '.value')

        if [[ "${{ inputs.IsOrganization }}" == "true" ]]; then
          field_id=$(jq -r --arg field_name "$field_name" '.data.organization.projectV2.fields.nodes[] | select(.name == $field_name) | .id' project_data.json)
          value_id=$(jq -r --arg field_name "$field_name" --arg option_name "$value_name" '.data.organization.projectV2.fields.nodes[] | select(.name == $field_name).options[] | select(.name == $option_name) | .id' project_data.json)
        else
          field_id=$(jq -r --arg field_name "$field_name" '.data.user.projectV2.fields.nodes[] | select(.name == $field_name) | .id' project_data.json)
          value_id=$(jq -r --arg field_name "$field_name" --arg option_name "$value_name" '.data.user.projectV2.fields.nodes[] | select(.name == $field_name).options[] | select(.name == $option_name) | .id' project_data.json)
        fi
          enc_data+="$field_id=$value_id,"
        done

        enc_data="${enc_data%,}]"
        echo "FIELD_ID_VALUES=$enc_data" >> $GITHUB_ENV

    - name: Display saved data
      shell: bash
      run: |
        echo "Saved Field IDs and Values: $FIELD_ID_VALUES"

    - name: get-item-id
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        if [[ "${{ github.event_name }}" == "issues" ]]; then
          NUMBER=${{ github.event.issue.number }}
        else
          NUMBER=${{ github.event.pull_request.number }}
        fi

        REPOSITORY_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f2)

        ITEM_ID=$(gh api graphql -f query='
          query($owner: String!, $name: String!, $issueNumber: Int!) {
            repository(owner: $owner, name: $name) {
              issue(number: $issueNumber) {
                projectItems(first: 1) {
                  nodes {
                    id
                  }
                }
              }
            }
          }' -f owner="${{ github.repository_owner }}" -f name="$REPOSITORY_NAME" -f issueNumber=$NUMBER  --jq '.data.repository.issue.projectItems.nodes[0].id')

        echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

    - name: set-field
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        for field_id_value in $FIELD_ID_VALUES; do
          field_id=$(echo $field_id_value | cut -d '=' -f1)
          value_id=$(echo $field_id_value | cut -d '=' -f2)

          gh projects item-edit --id $ITEM_ID --field-id $field_id  --project-id ${{ env.PROJECT_ID }} --single-select-option-id $value_id
        done
